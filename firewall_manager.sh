#!/bin/bash

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonction pour cr√©er un r√©seau Docker
create_network() {
    echo -e "${CYAN}üì° Cr√©ation du r√©seau Docker sae-firewall-network...${NC}"
    docker network create --subnet=192.168.50.0/24 sae-firewall-network
    echo -e "${GREEN}‚úÖ R√©seau cr√©√© avec succ√®s !${NC}"
}

# Fonction pour d√©ployer les conteneurs
deploy_containers() {
    echo -e "${CYAN}üöÄ D√©ploiement des conteneurs...${NC}"

    # V√©rifier si Docker Compose est install√©
    if ! command -v docker compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose n'est pas install√© !${NC}"
        exit 1
    fi

    # Arr√™ter et supprimer les conteneurs existants
    docker compose down

    # Construire et red√©marrer tous les conteneurs
    docker compose up -d --build

    # V√©rifier que les conteneurs sont bien en cours d'ex√©cution
    sleep 5  # Attendre quelques secondes
    if ! docker ps --format '{{.Names}}' | grep -q "firewall"; then
        echo -e "${RED}‚ùå Le conteneur firewall n'a pas d√©marr√© correctement !${NC}"
        exit 1
    fi
    if ! docker ps --format '{{.Names}}' | grep -q "attacker"; then
        echo -e "${RED}‚ùå Le conteneur attacker n'a pas d√©marr√© correctement !${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Conteneurs d√©ploy√©s avec succ√®s !${NC}"
}


# Fonction pour ajouter une r√®gle IPTables
add_firewall_rule() {
    echo -e "${CYAN}üîí Entrez le port que vous souhaitez bloquer (ex: 443, 22, 80) :${NC}"
    read port

    # V√©rifier si le conteneur firewall est actif
    if ! docker ps --format '{{.Names}}' | grep -q "firewall"; then
        echo -e "${RED}‚ùå Le conteneur firewall n'est pas en cours d'ex√©cution !${NC}"
        return
    fi

    docker exec -it firewall sh -c "iptables -A INPUT -p tcp --dport $port -j DROP"
    docker exec -it firewall sh -c "iptables-save > /etc/iptables.rules"

    echo -e "${GREEN}‚úÖ R√®gle ajout√©e : Port $port bloqu√© !${NC}"
}

# Fonction pour afficher les r√®gles du firewall
show_firewall_status() {
    echo -e "${CYAN}üîç Affichage des r√®gles actuelles du firewall :${NC}"
    docker exec -it firewall iptables -L -v -n
}

# Fonction pour tester la connectivit√©
check_connectivity() {
    echo -e "${CYAN}üîÑ V√©rification de la connectivit√© entre les conteneurs...${NC}"

    # V√©rifier si attacker est en cours d'ex√©cution
    if ! docker ps --format '{{.Names}}' | grep -q "attacker"; then
        echo -e "${RED}‚ùå Le conteneur attacker n'est pas en cours d'ex√©cution !${NC}"
        return
    fi

    # V√©rifier la connectivit√© avec Nginx
    docker exec -it attacker sh -c "curl -k https://nginx" || echo -e "${RED}‚ùå √âchec de connexion √† Nginx !${NC}"
}


# Menu interactif
while true; do
    clear
    echo -e "${CYAN}============= üî• GESTION DU FIREWALL üî• =============${NC}"
    echo -e "${GREEN}1Ô∏è‚É£  Cr√©er le r√©seau Docker${NC}"
    echo -e "${GREEN}2Ô∏è‚É£  D√©ployer les conteneurs${NC}"
    echo -e "${GREEN}3Ô∏è‚É£  Ajouter une r√®gle IPTables${NC}"
    echo -e "${GREEN}4Ô∏è‚É£  Afficher les r√®gles du firewall${NC}"
    echo -e "${GREEN}5Ô∏è‚É£  V√©rifier la connectivit√© entre les conteneurs${NC}"
    echo -e "${RED}0Ô∏è‚É£  Quitter${NC}"
    echo -n -e "${CYAN}üëâ Choisissez une option : ${NC}"
    read choix

    case $choix in
        1) create_network ;;
        2) deploy_containers ;;
        3) add_firewall_rule ;;
        4) show_firewall_status ;;
        5) check_connectivity ;;
        0) echo -e "${RED}üö™ Sortie du programme.${NC}" && exit ;;
        *) echo -e "${RED}‚ùå Option invalide !${NC}" ;;
    esac
    echo -e "${CYAN}Appuyez sur Entr√©e pour continuer...${NC}"
    read
done

